---
description: 5-step planning methodology for structured development tasks
globs:
alwaysApply: false
---

# Planning Process

## 5-Step Planning Process

### Step 1: Requirements Gathering
- **Understand the task:** What exactly needs to be accomplished?
- **Gather context:** What existing systems/files are involved?
- **Identify constraints:** What limitations or requirements exist?
- **Define success criteria:** How will we know the task is complete?
- **Clarify scope:** What is in-scope vs out-of-scope?

### Step 2: Create Planning Document
- **Create plan document** in `docs/plans/<task_name>.md`
- **Document requirements** gathered in Step 1
- **Analyze current state** of relevant systems
- **Identify dependencies** and prerequisites
- **Draft initial approach** and architecture decisions

### Step 3: Refine Planning Document
- **Present the plan** to the user for review
- **Gather feedback** and make adjustments
- **Ensure all requirements** are captured accurately
- **Validate approach** with user's expectations
- **Get explicit approval** before proceeding to implementation

### Step 4: Execute Implementation
- **Follow the planned approach** step by step
- **Track progress** using TodoWrite tool for complex tasks
- **Document decisions** made during implementation
- **Handle unexpected issues** by updating the plan
- **Maintain communication** with user throughout

### Step 5: Implementation Report
- **Update the planning document** with implementation details
- **Document what was actually built** vs what was planned
- **Record key decisions** and rationale
- **Note any deviations** from the original plan
- **Include testing results** and validation
- **Provide next steps** or recommendations

## Planning Best Practices

### For Requirements Gathering
- Ask open-ended questions to understand the "why" behind requests
- Explore edge cases and error conditions
- Consider integration with existing systems
- Validate assumptions with the user

### For Planning Documents
- Be specific and actionable in plans
- Include concrete examples where helpful
- Consider both happy path and error scenarios
- Make plans reviewable and updatable

### For Implementation
- Follow the plan but be flexible when needed
- Document deviations and reasons
- Communicate regularly with the user
- Test incrementally as you build

### For Documentation
- Keep the planning document updated throughout
- Include both successes and failures
- Make it useful for future similar tasks
- Consider what future developers will need to know
